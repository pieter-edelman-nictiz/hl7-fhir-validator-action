name: HL7 Validator
description: Run the HL7 Java validator and analyze the results.
inputs:
  version:
    description: The FHIR version to use
  ig:
    description: An IG or profile definition to load (multiple ig's seperated by spaces may be defined)
  recurse:
    description: Look in subfolders when 'ig' refers to a folder
    default: "true"
  tx:
    description: The [base] url of a FHIR terminology server
  profile:
    desciption: the canonical URL to validate against
  language:
    description: The language to use when validating coding displays - same value as for xml:lang
  source:
    description: a file, url, directory or pattern for resources to validate
    required: true
  fail-at:
    description: The level at which issues are considered fatal (fatal, error, warning or information).
    default: error
  verbosity-level:
    description: Only show issues at this level or more severe (error, warning or information).
    default: information
  ignored-issues:
    description: A YAML file listing issues that should be ignored.
  suppress-display-issues:
    description: Suppress all reported issues about incorrect terminology displays.
  validator-version:
    description: The version of the HL7 Validator to use.
    default: "latest"
outputs:
  was-skipped:
    description: Indicate whether the check was skipped
    value: ${{ steps.check_run.outputs.run != 'run' }}
  stats-file:
    description: The location of the JSON file containing statistics about the check.
    value: ${{ steps.analyze-results.outputs.stats-file }}
runs:
  using: composite
  steps:
    - run: |
        do_run=false
        for source in ${{inputs.source}}; do 
          if [[ -f $source ]]; then
            do_run=true
          fi
        done
        if $do_run; then
          echo "run=run" >> $GITHUB_OUTPUT
        else
          echo "No input, skipping"
          echo "run=" >> $GITHUB_OUTPUT
        fi
      id: check_run
      shell: bash
    - run: |
        if [ ${{ steps.check_run.outputs.run }} ]; then
          echo "::group::Echo getting the validator"
          if [ ! -f ~/validator/validator_cli.jar ]; then
            mkdir -p ~/validator
            wget -nv -O ~/validator/validator_cli.jar https://github.com/hapifhir/org.hl7.fhir.core/releases/${{inputs.validator-version}}/download/validator_cli.jar
          else
            echo "Validator already present"
          fi
          echo "::endgroup::"
        fi
      shell: bash
    - run: |
        echo "opt_version=$(if [ ! -z ${{inputs.version}} ]; then echo -version ${{ inputs.version }};fi)" >> $GITHUB_OUTPUT
        echo "opt_ig=$(for ig in ${{inputs.ig}}; do echo -n "-ig $ig ";done)" >> $GITHUB_OUTPUT
        echo "opt_recurse=$(if [ ! -z ${{inputs.recurse}} ]; then echo -recurse;fi)" >> $GITHUB_OUTPUT
        echo "opt_tx=$(if [ ! -z ${{inputs.tx}} ]; then echo -tx ${{ inputs.tx }};fi)" >> $GITHUB_OUTPUT
        echo "opt_profile=$(if [ ! -z ${{inputs.profile}} ]; then echo -profile ${{ inputs.profile }};fi)" >> $GITHUB_OUTPUT
        echo "opt_language=$(if [ ! -z ${{inputs.language}} ]; then echo -language ${{ inputs.language }};fi)" >> $GITHUB_OUTPUT
        echo "opt_ignored_issues=$(if [ ! -z ${{inputs.ignored-issues}} ]; then echo --ignored-issues=${{ inputs.ignored-issues }};fi)" >> $GITHUB_OUTPUT
        echo "opt_suppress_display_issues=$(if [ ! -z ${{inputs.suppress-display-issues}} ]; then echo --suppress-display-issues;fi)" >> $GITHUB_OUTPUT
      id: set_options
      shell: bash
    - run: |
        if [ ${{ steps.check_run.outputs.run }} ]; then
          echo "::group::Run the validator"
          out_file=$(mktemp --suffix=.xml)
          echo "out-file=$out_file" >> $GITHUB_OUTPUT
          java -jar ~/validator/validator_cli.jar ${{ steps.set_options.outputs.opt_version }} ${{ steps.set_options.outputs.opt_ig }} ${{ steps.set_options.outputs.opt_recurse }} ${{ steps.set_options.outputs.opt_tx }} ${{ steps.set_options.outputs.opt_profile }} ${{ steps.set_options.outputs.opt_language }} -output $out_file ${{ inputs.source }} | cat
          echo "::endgroup::"
        fi
      id: run_validator
      shell: bash --noprofile --norc {0}
    - id: analyze-results
      run: |
        stats_file=$(mktemp --suffix=.json)
        echo "stats-file=$stats_file" >> $GITHUB_OUTPUT
        if [ ${{ steps.check_run.outputs.run }} ]; then
          if [[ -f ${{ steps.run_validator.outputs.out-file }} ]]; then
            python3 ${{ github.action_path }}/analyze_results.py -a ${{ inputs.fail-at }} -v ${{ inputs.verbosity-level }} ${{ steps.set_options.outputs.opt_ignored_issues }} ${{ steps.set_options.outputs.opt_suppress_display_issues }} --colorize --github --stats-file=$stats_file ${{ steps.run_validator.outputs.out-file }}
          else
            echo "::error::The HL7 Validator didn't produce any output!"
            echo "{}" >> $stats_file
          fi
        fi
      shell: bash
